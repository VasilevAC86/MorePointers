# include <iostream>

int main() {
	setlocale(LC_ALL, "Russian");
	int n = 7, m;

	// Нейтральный адресс
	int* pointer;
	
	// pionter = 0; // рабочий, но неудобный способ
	//pointer = 0;
	//pointer = NULL; // более удобный способ, но по факту - костыль
	pointer = nullptr; // Самый эффективный и правильный способ создания нейтрального указателя

	if (pointer != nullptr)
		std::cout << pointer << std::endl;
	else
		std::cout << "Указатель не инициализирован\n";

	// Модификации доступа указателей
	// Указатель на константу. Может быть объявлен неинициализированным и перенапраляться на другие области памяти, но с 
	// его помощью невозможно поменять значение памяти, на которую он направлен
	const int* pn1;
	pn1 = &n;
	// *pn1 = 5; // ОШИБКА

	// Константный указатель или указатель-константа
	// Не может быть объявлен без инициализации и не может быть перенаправлен на другие области памяти, но с его помощью можно
	// менять память, на которую он направлен
	int* const pn2 = &n;
	*pn2 = 15;
	std::cout << *pn2 << std::endl;
	
	// Константный указатель на константу.
	// Не может быть объявлен без инициализации и не может быть перенаправлен на другую область памяти. С его помощью также НЕВОЗМОЖНО
	// менять область памяти, на которую он направлен
	const int* const pn3 = &n;
	pn3 = &m; // ОШИБКА!
	*pn3 = 42; // ОШИБКА!

	return 0;
}